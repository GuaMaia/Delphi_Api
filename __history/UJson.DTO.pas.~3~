unit UJson.DTO;

interface

uses
  System.SysUtils, System.Classes, System.JSON, System.Generics.Collections;

type
  TJsonDTO = class
  private
    FJSON: TJSONObject;
  public
    constructor Create(const jsonString: string);
    destructor Destroy; override;

    function ObterCodigo: string;
    function ObterNomeCliente: string;
    function ObterCPF: string;
    function ObterDataPedido: string;
    function ObterStatus: string;
    function ObterTotal: string;

    procedure ColorirStatus(const editText: TEdit);

    function ObterItens: TJSONArray;
  end;

implementation

constructor TJsonDTO.Create(const jsonString: string);
begin
  inherited Create;
  FJSON := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(jsonString), 0) as TJSONObject;
end;

destructor TJsonDTO.Destroy;
begin
  FJSON.DisposeOf;
  inherited;
end;

function TJsonDTO.ObterCodigo: string;
begin
  Result := FJSON.GetValue('codigo').ToString;
end;

function TJsonDTO.ObterNomeCliente: string;
begin
  Result := AnsiReplaceStr(FJSON.GetValue('nomeCliente').ToString, '"', '');
end;

function TJsonDTO.ObterCPF: string;
begin
  Result := AnsiReplaceStr(FJSON.GetValue('cpf').ToString, '"', '');
end;

function TJsonDTO.ObterDataPedido: string;
begin
  Result := AnsiReplaceStr(AnsiReplaceStr(FJSON.GetValue('dataPedido').ToString, '"', ''), '\', '');
end;

function TJsonDTO.ObterStatus: string;
begin
  Result := AnsiReplaceStr(FJSON.GetValue('status').ToString, '"', '');
end;

function TJsonDTO.ObterTotal: string;
begin
  Result := AnsiReplaceStr(FJSON.GetValue('total').ToString, '"', '');
end;

procedure TJsonDTO.ColorirStatus(const editText: TEdit);
begin
  // Lógica de colorir o status em editText
  // ...
end;

function TJsonDTO.ObterItens: TJSONArray;
begin
  Result := FJSON.GetValue<TJSONArray>('items');
end;

// Uso do objeto:
var
  MeuObjetoJSON: TJsonDTO;
  ItensArray: TJSONArray;
  i: Integer;
begin
  MeuObjetoJSON := TJsonDTO.Create(json);

  try
    // Exemplo de uso dos métodos
    EdStatus.Text := MeuObjetoJSON.ObterStatus;
    MeuObjetoJSON.ColorirStatus(EdStatus);

    ItensArray := MeuObjetoJSON.ObterItens;
    for i := 0 to ItensArray.Size - 1 do
    begin
      // Lógica para processar cada item
      // ...
    end;
  finally
    MeuObjetoJSON.Free;
  end;

  end.


