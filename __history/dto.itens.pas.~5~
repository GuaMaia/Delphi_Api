unit dto.itens;

interface

uses
  model.Itens,dto.intefaces;

type
  TItensDTO = class(TInterfacedObject,iItens)
    private
      FItens : TItens;
    public
      constructor Create(Itens : iItens );
      destructor Destroy; override;
      class function New(Itens : iItens) : iItens;

      function Produto (Value :String) : iItem; overload;
      function Produto: String; overload;
      function Preco (Value :Double) : iItem; overload;
      function Preco: Double; overload;
      function Qtd (Value : Integer) : iItem; overload;
      function Qtd: Integer; overload;
      function Build : ipedido; // Tenho relacionamento com o pedido

  end;

implementation


constructor TItensDTO.Create;
begin
  FPedido :=  Pedido;
end;

destructor TItensDTO.Destroy;
begin
  FItens.Free;
  inherited;
end;

class function TItensDTO.New(Itens: iItens): iItens;
begin
  Self := Self.Create(Pedido);
end;

function TItensDTO.Build: ipedido;
begin
   Result := FPedido;
end;

function TItensDTO.Preco: Double;
begin

end;

function TItensDTO.Preco(Value: Double): iItem;
begin

end;

function TItensDTO.Produto: String;
begin

end;

function TItensDTO.Produto(Value: String): iItem;
begin

end;

function TItensDTO.Qtd(Value: Integer): iItem;
begin

end;

function TItensDTO.Qtd: Integer;
begin

end;

end.
